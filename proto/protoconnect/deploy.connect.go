// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deploy.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "gitlab.com/anaxita-server/easy-deploy/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeployServiceName is the fully-qualified name of the DeployService service.
	DeployServiceName = "deploy.DeployService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeployServiceSignUpProcedure is the fully-qualified name of the DeployService's SignUp RPC.
	DeployServiceSignUpProcedure = "/deploy.DeployService/SignUp"
	// DeployServiceSignInProcedure is the fully-qualified name of the DeployService's SignIn RPC.
	DeployServiceSignInProcedure = "/deploy.DeployService/SignIn"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deployServiceServiceDescriptor      = proto.File_deploy_proto.Services().ByName("DeployService")
	deployServiceSignUpMethodDescriptor = deployServiceServiceDescriptor.Methods().ByName("SignUp")
	deployServiceSignInMethodDescriptor = deployServiceServiceDescriptor.Methods().ByName("SignIn")
)

// DeployServiceClient is a client for the deploy.DeployService service.
type DeployServiceClient interface {
	SignUp(context.Context, *connect.Request[proto.SignUpRequest]) (*connect.Response[proto.SignUpResponse], error)
	SignIn(context.Context, *connect.Request[proto.SignInRequest]) (*connect.Response[proto.SignInResponse], error)
}

// NewDeployServiceClient constructs a client for the deploy.DeployService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeployServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeployServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deployServiceClient{
		signUp: connect.NewClient[proto.SignUpRequest, proto.SignUpResponse](
			httpClient,
			baseURL+DeployServiceSignUpProcedure,
			connect.WithSchema(deployServiceSignUpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signIn: connect.NewClient[proto.SignInRequest, proto.SignInResponse](
			httpClient,
			baseURL+DeployServiceSignInProcedure,
			connect.WithSchema(deployServiceSignInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deployServiceClient implements DeployServiceClient.
type deployServiceClient struct {
	signUp *connect.Client[proto.SignUpRequest, proto.SignUpResponse]
	signIn *connect.Client[proto.SignInRequest, proto.SignInResponse]
}

// SignUp calls deploy.DeployService.SignUp.
func (c *deployServiceClient) SignUp(ctx context.Context, req *connect.Request[proto.SignUpRequest]) (*connect.Response[proto.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// SignIn calls deploy.DeployService.SignIn.
func (c *deployServiceClient) SignIn(ctx context.Context, req *connect.Request[proto.SignInRequest]) (*connect.Response[proto.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// DeployServiceHandler is an implementation of the deploy.DeployService service.
type DeployServiceHandler interface {
	SignUp(context.Context, *connect.Request[proto.SignUpRequest]) (*connect.Response[proto.SignUpResponse], error)
	SignIn(context.Context, *connect.Request[proto.SignInRequest]) (*connect.Response[proto.SignInResponse], error)
}

// NewDeployServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeployServiceHandler(svc DeployServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deployServiceSignUpHandler := connect.NewUnaryHandler(
		DeployServiceSignUpProcedure,
		svc.SignUp,
		connect.WithSchema(deployServiceSignUpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deployServiceSignInHandler := connect.NewUnaryHandler(
		DeployServiceSignInProcedure,
		svc.SignIn,
		connect.WithSchema(deployServiceSignInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deploy.DeployService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeployServiceSignUpProcedure:
			deployServiceSignUpHandler.ServeHTTP(w, r)
		case DeployServiceSignInProcedure:
			deployServiceSignInHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeployServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeployServiceHandler struct{}

func (UnimplementedDeployServiceHandler) SignUp(context.Context, *connect.Request[proto.SignUpRequest]) (*connect.Response[proto.SignUpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.DeployService.SignUp is not implemented"))
}

func (UnimplementedDeployServiceHandler) SignIn(context.Context, *connect.Request[proto.SignInRequest]) (*connect.Response[proto.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.DeployService.SignIn is not implemented"))
}
